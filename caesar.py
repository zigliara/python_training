# Caesar Cypher# Function: Encode the textdef encode(file_name, encode_dict, encode_decode):    file_address = '/Users/maxzigliara/Documents/Kodning/python/' + str(file_name)    # Encode functionality, from the file name given by the user    # The Encoded_file_name is created    if encode_decode:        encoded_file = '/Users/maxzigliara/Documents/Kodning/python/' + 'Encoded_' + str(file_name)        with open(encoded_file, 'w') as my_file:            my_source_file = open(file_address, 'r')            my_text = my_source_file.read()            my_source_file.close()            for letter in my_text:                if ord(letter) != 32: # ASCII for mellanslag                    my_file.write(encode_dict[letter])                else:                    my_file.write(' ')    else:    # Decode functionality, from the Encoded_file_name    # The Decoded_file_name is created        decoded_file = '/Users/maxzigliara/Documents/Kodning/python/' + 'Decoded_' + str(file_name)        with open(decoded_file, 'w') as my_file:            my_source_file = open(file_address, 'r')            my_text = my_source_file.read()            my_source_file.close()            for letter in my_text:                if ord(letter) != 32: # ASCII for mellanslag                    my_file.write(encode_dict[letter])                else:                    my_file.write(' ')# Create a dictionary for the letters# Keys in the dictionary are letters in the text to encode# Values in the dictionary are the corresponding encoded lettersdef create_dict(offset, encode_decode):    encode_dict = {}    decode_dict= {}    for i in range(97, 123):        if i + offset < 123 and i + offset >= 97:            encode_dict[chr(i)] = chr(i + offset)        elif i + offset >= 123:            encode_dict[chr(i)] = chr(i + offset - 123 + 97)        else: # i + offset < 97: Negative offset            encode_dict[chr(i)] = chr(i + offset + 123 - 97)    if encode_decode:        return encode_dict    else:        # Creating the decode dictionary        for key in encode_dict.keys():            decode_dict[encode_dict[key]] = key        return decode_dict"""The user shall be allowed to decide whether to encode or decode a file"""def user_choice():    while True:        answer = raw_input('Would you like to encode or decode a file? [encode/decode]')        if answer.lower() == 'encode' or answer.lower() == 'e':            return True        elif answer.lower() == 'decode' or answer.lower() == 'd':            return Falsedef main():    if user_choice():        my_file = str(raw_input('Give me the name of the file to encode: '))        my_offset = int(input('Please enter the encryption key: '))        encode_dict = create_dict(my_offset, True)        encode(my_file, encode_dict, True) # Boolean for encoding    else:        my_file = str(raw_input('Give me the name of the file to decode: '))        my_offset = int(input('Please enter the decryption key: '))        decode_dict = create_dict(my_offset, False)        encode(my_file, decode_dict, False) # Boolean for decodingif __name__ == "__main__":    main()